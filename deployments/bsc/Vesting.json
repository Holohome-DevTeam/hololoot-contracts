{
  "address": "0x90E6b0d0e3a985E2D317B4dFdc8f527ACdE377D1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "name": "Vested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "claimTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAllClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getVestingByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dateStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vesting.Vest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getVestings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dateStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vesting.Vest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "getVestingsByRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dateStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vesting.Vest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_startTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_totalTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        }
      ],
      "name": "massAddHolders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x145e7ab0603c1e1392e13d86cf8d51e53987f86d9331fad1387788e9af25fe8a",
  "receipt": {
    "to": null,
    "from": "0x19e80ffC24957537c7FaAab79853BF1eDc99B547",
    "contractAddress": "0x90E6b0d0e3a985E2D317B4dFdc8f527ACdE377D1",
    "transactionIndex": 17,
    "gasUsed": "1780829",
    "logsBloom": "0x00000000000000000000000000000000000000000008000000800000040000000002000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa9081b3d8040e0cb5126483f17ad50c55b9da1f2d3c67183f294f6cb98cc873c",
    "transactionHash": "0x145e7ab0603c1e1392e13d86cf8d51e53987f86d9331fad1387788e9af25fe8a",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 14328442,
        "transactionHash": "0x145e7ab0603c1e1392e13d86cf8d51e53987f86d9331fad1387788e9af25fe8a",
        "address": "0x90E6b0d0e3a985E2D317B4dFdc8f527ACdE377D1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019e80ffc24957537c7faaab79853bf1edc99b547"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xa9081b3d8040e0cb5126483f17ad50c55b9da1f2d3c67183f294f6cb98cc873c"
      }
    ],
    "blockNumber": 14328442,
    "cumulativeGasUsed": "3016446",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3f2f266760bfcae4a748f3f4b30ab9cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"claimTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVestingByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dateStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.Vest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVestings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dateStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.Vest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"getVestingsByRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dateStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.Vest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"massAddHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vesting is constantly releasing vested tokens every block every second\",\"events\":{\"Claimed(address,uint256)\":{\"details\":\"events\"}},\"kind\":\"dev\",\"methods\":{\"claim()\":{\"details\":\"Claim tokens from msg.sender vestings\"},\"claimOwnership()\":{\"details\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"claimTo(address)\":{\"details\":\"Claim tokens from msg.sender vestings to external address\",\"params\":{\"_target\":\"transfer address for claimed tokens\"}},\"getAllClaimable(address)\":{\"details\":\"Read total amount of tokens that user can claim to date from all vestings      Function also includes tokens to claim from sale contracts that were not      yet initiated for user.\",\"params\":{\"_user\":\"address of holder\"},\"returns\":{\"amount\":\"number of tokens\"}},\"getClaimable(address,uint256)\":{\"details\":\"Read number of claimable tokens by user and vesting no\",\"params\":{\"_id\":\"his vesting number (starts from 0)\",\"_user\":\"address of holder\"},\"returns\":{\"amount\":\"number of tokens\"}},\"getVestingByIndex(uint256)\":{\"details\":\"Read single registered vesting entry\",\"params\":{\"_id\":\"index of vesting in storage\"},\"returns\":{\"_0\":\"Vest object\"}},\"getVestings(address)\":{\"details\":\"Extract all the vestings for the user      Also extract not initialized vestings from      sale contracts.\",\"params\":{\"_user\":\"address of holder\"},\"returns\":{\"_0\":\"v array of Vest objects\"}},\"getVestingsByRange(uint256,uint256)\":{\"details\":\"Read registered vesting list by range from-to\",\"params\":{\"_end\":\"last index\",\"_start\":\"first index\"},\"returns\":{\"_0\":\"array of Vest objects\"}},\"getVestingsCount()\":{\"details\":\"Read total number of vestings registered\",\"returns\":{\"_0\":\"number of registered vestings on contract\"}},\"init(address)\":{\"details\":\"Contract initiator\",\"params\":{\"_token\":\"address of vested token\"}},\"lock()\":{\"details\":\"Locks functions with whenNotLocked modifier\"},\"massAddHolders(address[],uint256[],uint256[],uint256,uint256)\":{\"details\":\"Add multiple vesting to contract by arrays of data\",\"params\":{\"_endDate\":\"date after which all tokens can be claimed\",\"_startDate\":\"date from when tokens can be claimed\",\"_startTokens\":\"[] tokens that can be withdrawn at startDate\",\"_totalTokens\":\"[] total tokens in vesting\",\"_users\":\"[] addresses of holders\"}},\"recoverETH()\":{\"details\":\"Recover ETH from contract to owner address.\"},\"recoverErc20(address)\":{\"details\":\"Recover given ERC20 token from contract to owner address.      Can't recover vested tokens.\",\"params\":{\"_token\":\"address of ERC20 token to recover\"}},\"transferOwnership(address,bool,bool)\":{\"details\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.      Can only be invoked by the current `owner`.\",\"params\":{\"_direct\":\"True if `_newOwner` should be set immediately. False if `_newOwner` needs to use `claimOwnership`.\",\"_newOwner\":\"Address of the new owner.\",\"_renounce\":\"Allows the `_newOwner` to be `address(0)` if `_direct` and `_renounce` is True. Has no effect otherwise\"}}},\"title\":\"Vesting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"token()\":{\"notice\":\"address of vested token\"},\"totalClaimed()\":{\"notice\":\"total tokens already claimed form vesting\"},\"totalVested()\":{\"notice\":\"total tokens vested in contract\"}},\"notice\":\"Vesting contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vesting/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/helpers/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\ncontract LockableData {\\n    bool public locked;\\n}\\n\\ncontract Lockable is LockableData, Ownable {\\n    /**\\n     * @dev Locks functions with whenNotLocked modifier\\n     */\\n    function lock() external onlyOwner {\\n        locked = true;\\n    }\\n\\n    /**\\n     * @dev Throws if called when unlocked.\\n     */\\n    modifier whenLocked {\\n        require(locked, \\\"Lockable: unlocked\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called after it was locked.\\n     */\\n    modifier whenNotLocked {\\n        require(!locked, \\\"Lockable: locked\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x17575789cfd8c1a18c928272f5e65de074cb9ced2855640c68fced99a03cace6\",\"license\":\"MIT\"},\"contracts/helpers/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\ncontract OwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract Ownable is OwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev `owner` defaults to msg.sender on construction.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n     *      Can only be invoked by the current `owner`.\\n     * @param _newOwner Address of the new owner.\\n     * @param _direct True if `_newOwner` should be set immediately. False if `_newOwner` needs to use `claimOwnership`.\\n     * @param _renounce Allows the `_newOwner` to be `address(0)` if `_direct` and `_renounce` is True. Has no effect otherwise\\n     */\\n    function transferOwnership(\\n        address _newOwner,\\n        bool _direct,\\n        bool _renounce\\n    ) external onlyOwner {\\n        if (_direct) {\\n            require(_newOwner != address(0) || _renounce, \\\"zero address\\\");\\n\\n            emit OwnershipTransferred(owner, _newOwner);\\n            owner = _newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            pendingOwner = _newOwner;\\n        }\\n    }\\n\\n    /**\\n     * @dev Needs to be called by `pendingOwner` to claim ownership.\\n     */\\n    function claimOwnership() external {\\n        address _pendingOwner = pendingOwner;\\n        require(msg.sender == _pendingOwner, \\\"caller != pending owner\\\");\\n\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24a3f3773e97a3ce2a9ef3e651972a78b3f4bfd3ff6e3312bf0c1ff5d3553daf\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function burn(uint256 amount) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\n\\n    // EIP 2612\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x568fccf87d36401a4dd824797fceeae1cc499c5f8cba3bf5b16f5980a09691e6\",\"license\":\"MIT\"},\"contracts/libraries/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n// Based on StableMath from mStable\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /**\\n     * @dev Provides an interface to the scaling unit\\n     * @return Scaling unit (1e18 or 1 * 10**18)\\n     */\\n    function getFullScale() internal pure returns (uint256) {\\n        return FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Scales a given integer to the power of the full scale.\\n     * @param x   Simple uint256 to scale\\n     * @return    Scaled value a to an exact number\\n     */\\n    function scaleInteger(uint256 x) internal pure returns (uint256) {\\n        return x * FULL_SCALE;\\n    }\\n\\n    /***************************************\\n              PRECISE ARITHMETIC\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        // return 9e36 / 1e18 = 9e18\\n        return (x * y) / scale;\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x * y;\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled + FULL_SCALE - 1;\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil / FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x     Left hand input to division\\n     * @param y     Right hand input to division\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return (x * FULL_SCALE) / y;\\n    }\\n\\n    /***************************************\\n                    HELPERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Calculates minimum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Minimum of the two inputs\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n\\n    /**\\n     * @dev Calculated maximum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Maximum of the two inputs\\n     */\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Clamps a value to an upper bound\\n     * @param x           Left hand input\\n     * @param upperBound  Maximum possible value to return\\n     * @return            Input x clamped to a maximum value, upperBound\\n     */\\n    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\\n        return x > upperBound ? upperBound : x;\\n    }\\n}\\n\",\"keccak256\":\"0xb0c4df3875b47b60b37a921c114cb0f8bc44b223898565e3ec8049c6625be2d3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vesting/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport { StableMath } from \\\"../libraries/StableMath.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { Ownable } from \\\"../helpers/Ownable.sol\\\";\\nimport { Lockable } from \\\"../helpers/Lockable.sol\\\";\\n\\n/**\\n * @title   Vesting\\n * @notice  Vesting contract\\n * @dev     Vesting is constantly releasing vested tokens every block every second\\n */\\ncontract Vesting is Ownable, Lockable {\\n    using StableMath for uint256;\\n\\n    /// @notice address of vested token\\n    address public token;\\n    /// @notice total tokens vested in contract\\n    uint256 public totalVested;\\n    /// @notice total tokens already claimed form vesting\\n    uint256 public totalClaimed;\\n\\n    struct Vest {\\n        uint256 dateStart; // start of claiming, can claim startTokens\\n        uint256 dateEnd; // after it all tokens can be claimed\\n        uint256 totalTokens; // total tokens to claim\\n        uint256 startTokens; // tokens to claim on start\\n        uint256 claimedTokens; // tokens already claimed\\n    }\\n    /// @notice storage of vestings\\n    Vest[] internal vestings;\\n    /// @notice map of vestings for user\\n    mapping(address => uint256[]) internal user2vesting;\\n\\n    /// @dev events\\n    event Claimed(address indexed user, uint256 amount);\\n    event Vested(address indexed user, uint256 totalAmount, uint256 endDate);\\n\\n    /**\\n     * @dev Contract initiator\\n     * @param _token address of vested token\\n     */\\n    function init(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\n        require(token == address(0), \\\"init already done\\\");\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Add multiple vesting to contract by arrays of data\\n     * @param _users[] addresses of holders\\n     * @param _startTokens[] tokens that can be withdrawn at startDate\\n     * @param _totalTokens[] total tokens in vesting\\n     * @param _startDate date from when tokens can be claimed\\n     * @param _endDate date after which all tokens can be claimed\\n     */\\n    function massAddHolders(\\n        address[] calldata _users,\\n        uint256[] calldata _startTokens,\\n        uint256[] calldata _totalTokens,\\n        uint256 _startDate,\\n        uint256 _endDate\\n    ) external onlyOwner whenNotLocked {\\n        uint256 len = _users.length; //cheaper to use one variable\\n        require((len == _startTokens.length) && (len == _totalTokens.length), \\\"data size mismatch\\\");\\n        require(_startDate < _endDate, \\\"startDate cannot exceed endDate\\\");\\n        uint256 i;\\n        for (i; i < len; i++) {\\n            _addHolder(_users[i], _startTokens[i], _totalTokens[i], _startDate, _endDate);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add new vesting to contract\\n     * @param _user address of a holder\\n     * @param _startTokens how many tokens are claimable at start date\\n     * @param _totalTokens total number of tokens in added vesting\\n     * @param _startDate date from when tokens can be claimed\\n     * @param _endDate date after which all tokens can be claimed\\n     */\\n    function _addHolder(\\n        address _user,\\n        uint256 _startTokens,\\n        uint256 _totalTokens,\\n        uint256 _startDate,\\n        uint256 _endDate\\n    ) internal {\\n        require(_user != address(0), \\\"user address cannot be 0\\\");\\n        Vest memory v;\\n        v.startTokens = _startTokens;\\n        v.totalTokens = _totalTokens;\\n        v.dateStart = _startDate;\\n        v.dateEnd = _endDate;\\n\\n        totalVested += _totalTokens;\\n        vestings.push(v);\\n        user2vesting[_user].push(vestings.length); // we are skipping index \\\"0\\\" for reasons\\n        emit Vested(_user, _totalTokens, _endDate);\\n    }\\n\\n    /**\\n     * @dev Claim tokens from msg.sender vestings\\n     */\\n    function claim() external {\\n        _claim(msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Claim tokens from msg.sender vestings to external address\\n     * @param _target transfer address for claimed tokens\\n     */\\n    function claimTo(address _target) external {\\n        _claim(msg.sender, _target);\\n    }\\n\\n    /**\\n     * @dev internal claim function\\n     * @param _user address of holder\\n     * @param _target where tokens should be send\\n     * @return amt number of tokens claimed\\n     */\\n    function _claim(address _user, address _target) internal returns (uint256 amt) {\\n        require(_target != address(0), \\\"claim, then burn\\\");\\n        uint256 len = user2vesting[_user].length;\\n        require(len > 0, \\\"no vestings for user\\\");\\n        uint256 cl;\\n        uint256 i;\\n        for (i; i < len; i++) {\\n            Vest storage v = vestings[user2vesting[_user][i] - 1];\\n            cl = _claimable(v);\\n            v.claimedTokens += cl;\\n            amt += cl;\\n        }\\n        if (amt > 0) {\\n            totalClaimed += amt;\\n            _transfer(_target, amt);\\n            emit Claimed(_user, amt);\\n        } else revert(\\\"nothing to claim\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to send out claimed tokens\\n     * @param _user address that we send tokens\\n     * @param _amt amount of tokens\\n     */\\n    function _transfer(address _user, uint256 _amt) internal {\\n        require(IERC20(token).transfer(_user, _amt), \\\"token transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Count how many tokens can be claimed from vesting to date\\n     * @param _vesting Vesting object\\n     * @return canWithdraw number of tokens\\n     */\\n    function _claimable(Vest memory _vesting) internal view returns (uint256 canWithdraw) {\\n        uint256 currentTime = block.timestamp;\\n        if (_vesting.dateStart > currentTime) return 0;\\n        // we are somewhere in the middle\\n        if (currentTime < _vesting.dateEnd) {\\n            // how much time passed (as fraction * 10^18)\\n            // timeRatio = (time passed * 1e18) / duration\\n            uint256 timeRatio = (currentTime - _vesting.dateStart).divPrecisely(_vesting.dateEnd - _vesting.dateStart);\\n            // how much tokens we can get in total to date\\n            canWithdraw = (_vesting.totalTokens - _vesting.startTokens).mulTruncate(timeRatio) + _vesting.startTokens;\\n        }\\n        // time has passed, we can take all tokens\\n        else {\\n            canWithdraw = _vesting.totalTokens;\\n        }\\n        // but maybe we take something earlier?\\n        canWithdraw -= _vesting.claimedTokens;\\n    }\\n\\n    /**\\n     * @dev Read number of claimable tokens by user and vesting no\\n     * @param _user address of holder\\n     * @param _id his vesting number (starts from 0)\\n     * @return amount number of tokens\\n     */\\n    function getClaimable(address _user, uint256 _id) external view returns (uint256 amount) {\\n        amount = _claimable(vestings[user2vesting[_user][_id] - 1]);\\n    }\\n\\n    /**\\n     * @dev Read total amount of tokens that user can claim to date from all vestings\\n     *      Function also includes tokens to claim from sale contracts that were not\\n     *      yet initiated for user.\\n     * @param _user address of holder\\n     * @return amount number of tokens\\n     */\\n    function getAllClaimable(address _user) public view returns (uint256 amount) {\\n        uint256 len = user2vesting[_user].length;\\n        uint256 i;\\n        for (i; i < len; i++) {\\n            amount += _claimable(vestings[user2vesting[_user][i] - 1]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Extract all the vestings for the user\\n     *      Also extract not initialized vestings from\\n     *      sale contracts.\\n     * @param _user address of holder\\n     * @return v array of Vest objects\\n     */\\n    function getVestings(address _user) external view returns (Vest[] memory) {\\n        uint256 len = user2vesting[_user].length;\\n        Vest[] memory v = new Vest[](len);\\n\\n        // copy vestings\\n        uint256 i;\\n        for (i; i < len; i++) {\\n            v[i] = vestings[user2vesting[_user][i] - 1];\\n        }\\n\\n        return v;\\n    }\\n\\n    /**\\n     * @dev Read total number of vestings registered\\n     * @return number of registered vestings on contract\\n     */\\n    function getVestingsCount() external view returns (uint256) {\\n        return vestings.length;\\n    }\\n\\n    /**\\n     * @dev Read single registered vesting entry\\n     * @param _id index of vesting in storage\\n     * @return Vest object\\n     */\\n    function getVestingByIndex(uint256 _id) external view returns (Vest memory) {\\n        return vestings[_id];\\n    }\\n\\n    /**\\n     * @dev Read registered vesting list by range from-to\\n     * @param _start first index\\n     * @param _end last index\\n     * @return array of Vest objects\\n     */\\n    function getVestingsByRange(uint256 _start, uint256 _end) external view returns (Vest[] memory) {\\n        uint256 cnt = _end - _start + 1;\\n        uint256 len = vestings.length;\\n        require(_end < len, \\\"range error\\\");\\n        Vest[] memory v = new Vest[](cnt);\\n        uint256 i;\\n        for (i; i < cnt; i++) {\\n            v[i] = vestings[_start + i];\\n        }\\n        return v;\\n    }\\n\\n    /**\\n     * @dev Recover ETH from contract to owner address.\\n     */\\n    function recoverETH() external {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Recover given ERC20 token from contract to owner address.\\n     *      Can't recover vested tokens.\\n     * @param _token address of ERC20 token to recover\\n     */\\n    function recoverErc20(address _token) external {\\n        require(_token != token, \\\"not allowed\\\");\\n        uint256 amt = IERC20(_token).balanceOf(address(this));\\n        require(amt > 0, \\\"nothing to recover\\\");\\n        IBadErc20(_token).transfer(owner, amt);\\n    }\\n}\\n\\n/**\\n * @title IBadErc20\\n * @dev Interface for emergency recover any ERC20-tokens,\\n *      even non-erc20-compliant like USDT not returning boolean\\n */\\ninterface IBadErc20 {\\n    function transfer(address _recipient, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa7c1433cf16329a0d1adee9a6db1b4437b412253abbdfdbf3b959118831f1f29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610078565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b611f0c806100876000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063d54ad2a11161008c578063f83d08ba11610066578063f83d08ba1461030f578063fc0c546a14610317578063fc0d83291461033757600080fd5b8063d54ad2a1146102c6578063da638e64146102cf578063e30c3978146102ef57600080fd5b8063b95e099e116100bd578063b95e099e14610283578063cf30901214610296578063d02ffa55146102b357600080fd5b80638da5cb5b14610226578063a262f5f81461027057600080fd5b80634e71d92d1161012f5780636f5244b1116101145780636f5244b1146101e05780637a0c6dc0146101f3578063843277d11461021357600080fd5b80634e71d92d146101d05780634e71e0c8146101d857600080fd5b8063199cbc5411610160578063199cbc541461019957806319ab453c146101b55780633138b0a9146101c857600080fd5b80630614117a1461017c578063078dfbe714610186575b600080fd5b61018461034a565b005b610184610194366004611b1c565b61039b565b6101a260035481565b6040519081526020015b60405180910390f35b6101846101c3366004611b01565b6105b8565b6005546101a2565b610184610782565b61018461078c565b6101a26101ee366004611b65565b6108cd565b610206610201366004611b01565b61098b565b6040516101ac9190611ca9565b610184610221366004611b8f565b610b23565b60005461024b90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ac565b61018461027e366004611b01565b610d80565b610184610291366004611b01565b610d8e565b6000546102a39060ff1681565b60405190151581526020016101ac565b6101a26102c1366004611b01565b610fb4565b6101a260045481565b6102e26102dd366004611c55565b611060565b6040516101ac9190611d22565b60015461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b6101846110f7565b60025461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b610206610345366004611c87565b6111aa565b6000805460405173ffffffffffffffffffffffffffffffffffffffff61010090920491909116914780156108fc02929091818181858888f19350505050158015610398573d6000803e3d6000fd5b50565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064015b60405180910390fd5b81156105715773ffffffffffffffffffffffffffffffffffffffff831615158061044d5750805b6104b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f7a65726f20616464726573730000000000000000000000000000000000000000604482015260640161041d565b6000805460405173ffffffffffffffffffffffffffffffffffffffff8087169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff8516610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909116179055600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055505050565b6001805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055505050565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16331461063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161041d565b73ffffffffffffffffffffffffffffffffffffffff81166106bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5f746f6b656e20616464726573732063616e6e6f742062652030000000000000604482015260640161041d565b60025473ffffffffffffffffffffffffffffffffffffffff161561073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e697420616c726561647920646f6e65000000000000000000000000000000604482015260640161041d565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6103983333611361565b60015473ffffffffffffffffffffffffffffffffffffffff1633811461080e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c657220213d2070656e64696e67206f776e6572000000000000000000604482015260640161041d565b6000805460405173ffffffffffffffffffffffffffffffffffffffff8085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260408120805461098491600591600191908690811061090f5761090f611e6a565b90600052602060002001546109249190611deb565b8154811061093457610934611e6a565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050611655565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120546060918167ffffffffffffffff8111156109cd576109cd611e99565b604051908082528060200260200182016040528015610a3057816020015b610a1d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816109eb5790505b50905060005b82811015610b1b5773ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020805460059160019184908110610a7b57610a7b611e6a565b9060005260206000200154610a909190611deb565b81548110610aa057610aa0611e6a565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050828281518110610afd57610afd611e6a565b60200260200101819052508080610b1390611e02565b915050610a36565b509392505050565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161041d565b60005460ff1615610c16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c6f636b61626c653a206c6f636b656400000000000000000000000000000000604482015260640161041d565b868581148015610c2557508084145b610c8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f646174612073697a65206d69736d617463680000000000000000000000000000604482015260640161041d565b818310610cf4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f7374617274446174652063616e6e6f742065786365656420656e644461746500604482015260640161041d565b60005b81811015610d7457610d628a8a83818110610d1457610d14611e6a565b9050602002016020810190610d299190611b01565b898984818110610d3b57610d3b611e6a565b90506020020135888885818110610d5457610d54611e6a565b9050602002013587876116f1565b80610d6c81611e02565b915050610cf7565b50505050505050505050565b610d8a3382611361565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff82811691161415610e13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015260640161041d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610e7b57600080fd5b505afa158015610e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb39190611c6e565b905060008111610f1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6e6f7468696e6720746f207265636f7665720000000000000000000000000000604482015260640161041d565b6000546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff90811660048301526024820183905283169063a9059cbb90604401600060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054815b818110156110595761103b60056001600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061090f5761090f611e6a565b6110459084611d5b565b92508061105181611e02565b915050610fdc565b5050919050565b6110926040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b600582815481106110a5576110a5611e6a565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16331461117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161041d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b606060006111b88484611deb565b6111c3906001611d5b565b600554909150808410611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f72616e6765206572726f72000000000000000000000000000000000000000000604482015260640161041d565b60008267ffffffffffffffff81111561124d5761124d611e99565b6040519080825280602002602001820160405280156112b057816020015b61129d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161126b5790505b50905060005b838110156113555760056112ca8289611d5b565b815481106112da576112da611e6a565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505082828151811061133757611337611e6a565b6020026020010181905250808061134d90611e02565b9150506112b6565b50925050505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82166113e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636c61696d2c207468656e206275726e00000000000000000000000000000000604482015260640161041d565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260409020548061146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f2076657374696e677320666f722075736572000000000000000000000000604482015260640161041d565b6000805b8281101561156d5773ffffffffffffffffffffffffffffffffffffffff861660009081526006602052604081208054600591600191859081106114b6576114b6611e6a565b90600052602060002001546114cb9190611deb565b815481106114db576114db611e6a565b90600052602060002090600502019050611531816040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050611655565b9250828160040160008282546115479190611d5b565b9091555061155790508386611d5b565b945050808061156590611e02565b915050611471565b83156115ea5783600460008282546115859190611d5b565b909155506115959050858561192c565b8573ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a856040516115dd91815260200190565b60405180910390a261164c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e6f7468696e6720746f20636c61696d00000000000000000000000000000000604482015260640161041d565b50505092915050565b8051600090429081101561166c5750600092915050565b82602001518110156116da5760006116a3846000015185602001516116919190611deb565b855161169d9085611deb565b90611a3e565b905083606001516116c882866060015187604001516116c29190611deb565b90611a5d565b6116d29190611d5b565b9250506116e2565b826040015191505b60808301516109849083611deb565b73ffffffffffffffffffffffffffffffffffffffff851661176e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7573657220616464726573732063616e6e6f7420626520300000000000000000604482015260640161041d565b6117a06040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b606081018590526040810184905282815260208101829052600380548591906000906117cd908490611d5b565b90915550506005805460018082018355600083815284517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0938502938401556020808601517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18501556040808701517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db286015560608701517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db386015560808701517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db49095019490945573ffffffffffffffffffffffffffffffffffffffff8b1680835260068252848320955486549485018755958352918190209092019390935581518781529081018590527ffbeff59d2bfda0d79ea8a29f8c57c66d48c7a13eabbdb90908d9115ec41c9dc6910160405180910390a2505050505050565b6002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156119a057600080fd5b505af11580156119b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d89190611c38565b610d8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161041d565b600081611a53670de0b6b3a764000085611dae565b6109849190611d73565b60006109848383670de0b6b3a7640000600081611a7a8486611dae565b611a849190611d73565b949350505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611ab057600080fd5b919050565b60008083601f840112611ac757600080fd5b50813567ffffffffffffffff811115611adf57600080fd5b6020830191508360208260051b8501011115611afa57600080fd5b9250929050565b600060208284031215611b1357600080fd5b61098482611a8c565b600080600060608486031215611b3157600080fd5b611b3a84611a8c565b92506020840135611b4a81611ec8565b91506040840135611b5a81611ec8565b809150509250925092565b60008060408385031215611b7857600080fd5b611b8183611a8c565b946020939093013593505050565b60008060008060008060008060a0898b031215611bab57600080fd5b883567ffffffffffffffff80821115611bc357600080fd5b611bcf8c838d01611ab5565b909a50985060208b0135915080821115611be857600080fd5b611bf48c838d01611ab5565b909850965060408b0135915080821115611c0d57600080fd5b50611c1a8b828c01611ab5565b999c989b509699959896976060870135966080013595509350505050565b600060208284031215611c4a57600080fd5b815161098481611ec8565b600060208284031215611c6757600080fd5b5035919050565b600060208284031215611c8057600080fd5b5051919050565b60008060408385031215611c9a57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611d1657611d0383855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b9284019260a09290920191600101611cc5565b50909695505050505050565b60a0810161135b828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b60008219821115611d6e57611d6e611e3b565b500190565b600082611da9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611de657611de6611e3b565b500290565b600082821015611dfd57611dfd611e3b565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e3457611e34611e3b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461039857600080fdfea2646970667358221220d46b4aa9c254d63c9fe1fd202e1980b84c6834e8e87fc92da3fd93b93a665e4364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063d54ad2a11161008c578063f83d08ba11610066578063f83d08ba1461030f578063fc0c546a14610317578063fc0d83291461033757600080fd5b8063d54ad2a1146102c6578063da638e64146102cf578063e30c3978146102ef57600080fd5b8063b95e099e116100bd578063b95e099e14610283578063cf30901214610296578063d02ffa55146102b357600080fd5b80638da5cb5b14610226578063a262f5f81461027057600080fd5b80634e71d92d1161012f5780636f5244b1116101145780636f5244b1146101e05780637a0c6dc0146101f3578063843277d11461021357600080fd5b80634e71d92d146101d05780634e71e0c8146101d857600080fd5b8063199cbc5411610160578063199cbc541461019957806319ab453c146101b55780633138b0a9146101c857600080fd5b80630614117a1461017c578063078dfbe714610186575b600080fd5b61018461034a565b005b610184610194366004611b1c565b61039b565b6101a260035481565b6040519081526020015b60405180910390f35b6101846101c3366004611b01565b6105b8565b6005546101a2565b610184610782565b61018461078c565b6101a26101ee366004611b65565b6108cd565b610206610201366004611b01565b61098b565b6040516101ac9190611ca9565b610184610221366004611b8f565b610b23565b60005461024b90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ac565b61018461027e366004611b01565b610d80565b610184610291366004611b01565b610d8e565b6000546102a39060ff1681565b60405190151581526020016101ac565b6101a26102c1366004611b01565b610fb4565b6101a260045481565b6102e26102dd366004611c55565b611060565b6040516101ac9190611d22565b60015461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b6101846110f7565b60025461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b610206610345366004611c87565b6111aa565b6000805460405173ffffffffffffffffffffffffffffffffffffffff61010090920491909116914780156108fc02929091818181858888f19350505050158015610398573d6000803e3d6000fd5b50565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064015b60405180910390fd5b81156105715773ffffffffffffffffffffffffffffffffffffffff831615158061044d5750805b6104b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f7a65726f20616464726573730000000000000000000000000000000000000000604482015260640161041d565b6000805460405173ffffffffffffffffffffffffffffffffffffffff8087169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff8516610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909116179055600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055505050565b6001805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055505050565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16331461063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161041d565b73ffffffffffffffffffffffffffffffffffffffff81166106bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5f746f6b656e20616464726573732063616e6e6f742062652030000000000000604482015260640161041d565b60025473ffffffffffffffffffffffffffffffffffffffff161561073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e697420616c726561647920646f6e65000000000000000000000000000000604482015260640161041d565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6103983333611361565b60015473ffffffffffffffffffffffffffffffffffffffff1633811461080e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c657220213d2070656e64696e67206f776e6572000000000000000000604482015260640161041d565b6000805460405173ffffffffffffffffffffffffffffffffffffffff8085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260408120805461098491600591600191908690811061090f5761090f611e6a565b90600052602060002001546109249190611deb565b8154811061093457610934611e6a565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050611655565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120546060918167ffffffffffffffff8111156109cd576109cd611e99565b604051908082528060200260200182016040528015610a3057816020015b610a1d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816109eb5790505b50905060005b82811015610b1b5773ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020805460059160019184908110610a7b57610a7b611e6a565b9060005260206000200154610a909190611deb565b81548110610aa057610aa0611e6a565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050828281518110610afd57610afd611e6a565b60200260200101819052508080610b1390611e02565b915050610a36565b509392505050565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161041d565b60005460ff1615610c16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c6f636b61626c653a206c6f636b656400000000000000000000000000000000604482015260640161041d565b868581148015610c2557508084145b610c8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f646174612073697a65206d69736d617463680000000000000000000000000000604482015260640161041d565b818310610cf4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f7374617274446174652063616e6e6f742065786365656420656e644461746500604482015260640161041d565b60005b81811015610d7457610d628a8a83818110610d1457610d14611e6a565b9050602002016020810190610d299190611b01565b898984818110610d3b57610d3b611e6a565b90506020020135888885818110610d5457610d54611e6a565b9050602002013587876116f1565b80610d6c81611e02565b915050610cf7565b50505050505050505050565b610d8a3382611361565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff82811691161415610e13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015260640161041d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610e7b57600080fd5b505afa158015610e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb39190611c6e565b905060008111610f1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6e6f7468696e6720746f207265636f7665720000000000000000000000000000604482015260640161041d565b6000546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff90811660048301526024820183905283169063a9059cbb90604401600060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054815b818110156110595761103b60056001600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061090f5761090f611e6a565b6110459084611d5b565b92508061105181611e02565b915050610fdc565b5050919050565b6110926040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b600582815481106110a5576110a5611e6a565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16331461117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161041d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b606060006111b88484611deb565b6111c3906001611d5b565b600554909150808410611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f72616e6765206572726f72000000000000000000000000000000000000000000604482015260640161041d565b60008267ffffffffffffffff81111561124d5761124d611e99565b6040519080825280602002602001820160405280156112b057816020015b61129d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161126b5790505b50905060005b838110156113555760056112ca8289611d5b565b815481106112da576112da611e6a565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505082828151811061133757611337611e6a565b6020026020010181905250808061134d90611e02565b9150506112b6565b50925050505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82166113e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636c61696d2c207468656e206275726e00000000000000000000000000000000604482015260640161041d565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260409020548061146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f2076657374696e677320666f722075736572000000000000000000000000604482015260640161041d565b6000805b8281101561156d5773ffffffffffffffffffffffffffffffffffffffff861660009081526006602052604081208054600591600191859081106114b6576114b6611e6a565b90600052602060002001546114cb9190611deb565b815481106114db576114db611e6a565b90600052602060002090600502019050611531816040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050611655565b9250828160040160008282546115479190611d5b565b9091555061155790508386611d5b565b945050808061156590611e02565b915050611471565b83156115ea5783600460008282546115859190611d5b565b909155506115959050858561192c565b8573ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a856040516115dd91815260200190565b60405180910390a261164c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e6f7468696e6720746f20636c61696d00000000000000000000000000000000604482015260640161041d565b50505092915050565b8051600090429081101561166c5750600092915050565b82602001518110156116da5760006116a3846000015185602001516116919190611deb565b855161169d9085611deb565b90611a3e565b905083606001516116c882866060015187604001516116c29190611deb565b90611a5d565b6116d29190611d5b565b9250506116e2565b826040015191505b60808301516109849083611deb565b73ffffffffffffffffffffffffffffffffffffffff851661176e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7573657220616464726573732063616e6e6f7420626520300000000000000000604482015260640161041d565b6117a06040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b606081018590526040810184905282815260208101829052600380548591906000906117cd908490611d5b565b90915550506005805460018082018355600083815284517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0938502938401556020808601517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18501556040808701517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db286015560608701517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db386015560808701517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db49095019490945573ffffffffffffffffffffffffffffffffffffffff8b1680835260068252848320955486549485018755958352918190209092019390935581518781529081018590527ffbeff59d2bfda0d79ea8a29f8c57c66d48c7a13eabbdb90908d9115ec41c9dc6910160405180910390a2505050505050565b6002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156119a057600080fd5b505af11580156119b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d89190611c38565b610d8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161041d565b600081611a53670de0b6b3a764000085611dae565b6109849190611d73565b60006109848383670de0b6b3a7640000600081611a7a8486611dae565b611a849190611d73565b949350505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611ab057600080fd5b919050565b60008083601f840112611ac757600080fd5b50813567ffffffffffffffff811115611adf57600080fd5b6020830191508360208260051b8501011115611afa57600080fd5b9250929050565b600060208284031215611b1357600080fd5b61098482611a8c565b600080600060608486031215611b3157600080fd5b611b3a84611a8c565b92506020840135611b4a81611ec8565b91506040840135611b5a81611ec8565b809150509250925092565b60008060408385031215611b7857600080fd5b611b8183611a8c565b946020939093013593505050565b60008060008060008060008060a0898b031215611bab57600080fd5b883567ffffffffffffffff80821115611bc357600080fd5b611bcf8c838d01611ab5565b909a50985060208b0135915080821115611be857600080fd5b611bf48c838d01611ab5565b909850965060408b0135915080821115611c0d57600080fd5b50611c1a8b828c01611ab5565b999c989b509699959896976060870135966080013595509350505050565b600060208284031215611c4a57600080fd5b815161098481611ec8565b600060208284031215611c6757600080fd5b5035919050565b600060208284031215611c8057600080fd5b5051919050565b60008060408385031215611c9a57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611d1657611d0383855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b9284019260a09290920191600101611cc5565b50909695505050505050565b60a0810161135b828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b60008219821115611d6e57611d6e611e3b565b500190565b600082611da9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611de657611de6611e3b565b500290565b600082821015611dfd57611dfd611e3b565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e3457611e34611e3b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461039857600080fdfea2646970667358221220d46b4aa9c254d63c9fe1fd202e1980b84c6834e8e87fc92da3fd93b93a665e4364736f6c63430008060033",
  "devdoc": {
    "details": "Vesting is constantly releasing vested tokens every block every second",
    "events": {
      "Claimed(address,uint256)": {
        "details": "events"
      }
    },
    "kind": "dev",
    "methods": {
      "claim()": {
        "details": "Claim tokens from msg.sender vestings"
      },
      "claimOwnership()": {
        "details": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "claimTo(address)": {
        "details": "Claim tokens from msg.sender vestings to external address",
        "params": {
          "_target": "transfer address for claimed tokens"
        }
      },
      "getAllClaimable(address)": {
        "details": "Read total amount of tokens that user can claim to date from all vestings      Function also includes tokens to claim from sale contracts that were not      yet initiated for user.",
        "params": {
          "_user": "address of holder"
        },
        "returns": {
          "amount": "number of tokens"
        }
      },
      "getClaimable(address,uint256)": {
        "details": "Read number of claimable tokens by user and vesting no",
        "params": {
          "_id": "his vesting number (starts from 0)",
          "_user": "address of holder"
        },
        "returns": {
          "amount": "number of tokens"
        }
      },
      "getVestingByIndex(uint256)": {
        "details": "Read single registered vesting entry",
        "params": {
          "_id": "index of vesting in storage"
        },
        "returns": {
          "_0": "Vest object"
        }
      },
      "getVestings(address)": {
        "details": "Extract all the vestings for the user      Also extract not initialized vestings from      sale contracts.",
        "params": {
          "_user": "address of holder"
        },
        "returns": {
          "_0": "v array of Vest objects"
        }
      },
      "getVestingsByRange(uint256,uint256)": {
        "details": "Read registered vesting list by range from-to",
        "params": {
          "_end": "last index",
          "_start": "first index"
        },
        "returns": {
          "_0": "array of Vest objects"
        }
      },
      "getVestingsCount()": {
        "details": "Read total number of vestings registered",
        "returns": {
          "_0": "number of registered vestings on contract"
        }
      },
      "init(address)": {
        "details": "Contract initiator",
        "params": {
          "_token": "address of vested token"
        }
      },
      "lock()": {
        "details": "Locks functions with whenNotLocked modifier"
      },
      "massAddHolders(address[],uint256[],uint256[],uint256,uint256)": {
        "details": "Add multiple vesting to contract by arrays of data",
        "params": {
          "_endDate": "date after which all tokens can be claimed",
          "_startDate": "date from when tokens can be claimed",
          "_startTokens": "[] tokens that can be withdrawn at startDate",
          "_totalTokens": "[] total tokens in vesting",
          "_users": "[] addresses of holders"
        }
      },
      "recoverETH()": {
        "details": "Recover ETH from contract to owner address."
      },
      "recoverErc20(address)": {
        "details": "Recover given ERC20 token from contract to owner address.      Can't recover vested tokens.",
        "params": {
          "_token": "address of ERC20 token to recover"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "details": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.      Can only be invoked by the current `owner`.",
        "params": {
          "_direct": "True if `_newOwner` should be set immediately. False if `_newOwner` needs to use `claimOwnership`.",
          "_newOwner": "Address of the new owner.",
          "_renounce": "Allows the `_newOwner` to be `address(0)` if `_direct` and `_renounce` is True. Has no effect otherwise"
        }
      }
    },
    "title": "Vesting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "token()": {
        "notice": "address of vested token"
      },
      "totalClaimed()": {
        "notice": "total tokens already claimed form vesting"
      },
      "totalVested()": {
        "notice": "total tokens vested in contract"
      }
    },
    "notice": "Vesting contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3053,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "locked",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3095,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3097,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7433,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7436,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "totalVested",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7439,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7455,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "vestings",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Vest)7450_storage)dyn_storage"
      },
      {
        "astId": 7461,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "user2vesting",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Vest)7450_storage)dyn_storage": {
        "base": "t_struct(Vest)7450_storage",
        "encoding": "dynamic_array",
        "label": "struct Vesting.Vest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(Vest)7450_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.Vest",
        "members": [
          {
            "astId": 7441,
            "contract": "contracts/vesting/Vesting.sol:Vesting",
            "label": "dateStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7443,
            "contract": "contracts/vesting/Vesting.sol:Vesting",
            "label": "dateEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7445,
            "contract": "contracts/vesting/Vesting.sol:Vesting",
            "label": "totalTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7447,
            "contract": "contracts/vesting/Vesting.sol:Vesting",
            "label": "startTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7449,
            "contract": "contracts/vesting/Vesting.sol:Vesting",
            "label": "claimedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}